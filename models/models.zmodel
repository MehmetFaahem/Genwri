

model Template {

    id                String        @id @default(uuid())  
    name            String          
    type            String          
    description  String?          
    settings    Json?              

createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Image {

    id                String        @id @default(uuid())  
    prompt        String          
    style          String?          
    theme          String?          
    imageUrl    String          
    status        String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Article {

    id                String        @id @default(uuid())  
    title          String          
    topic          String?          
    keywords    String?          
    content      String          
    length        Float?            
    tone            String?          
    status        String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Download {

    id                String        @id @default(uuid())  
    resourceId  String          
    resourceType  String          
    format        String          
    downloadUrl  String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
 
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]

images        Image[]      @relation("user")  
        articles    Article[]  @relation("user")  
        downloads  Download[]  @relation("user")  

@@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}
